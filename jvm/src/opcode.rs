#[repr(u8)]
#[allow(non_camel_case_types)]
#[derive(Debug, Clone)]
pub enum OpCode {
    nop = 0x00,
    aconst_null = 0x01,
    iconst_m1 = 0x02,
    iconst_0 = 0x03,
    iconst_1 = 0x04,
    iconst_2 = 0x05,
    iconst_3 = 0x06,
    iconst_4 = 0x07,
    iconst_5 = 0x08,
    lconst_0 = 0x09,
    lconst_1 = 0x0a,
    fconst_0 = 0x0b,
    fconst_1 = 0x0c,
    fconst_2 = 0x0d,
    dconst_0 = 0x0e,
    dconst_1 = 0x0f,
    bipush = 0x10,
    sipush = 0x11,
    ldc = 0x12,
    ldc_w = 0x13,
    ldc2_w = 0x14,

    // Loads
    iload = 0x15,
    lload = 0x16,
    fload = 0x17,
    dload = 0x18,
    aload = 0x19,
    iload_0 = 0x1a,
    iload_1 = 0x1b,
    iload_2 = 0x1c,
    iload_3 = 0x1d,
    lload_0 = 0x1e,
    lload_1 = 0x1f,
    lload_2 = 0x20,
    lload_3 = 0x21,
    fload_0 = 0x22,
    fload_1 = 0x23,
    fload_2 = 0x24,
    fload_3 = 0x25,
    dload_0 = 0x26,
    dload_1 = 0x27,
    dload_2 = 0x28,
    dload_3 = 0x29,
    aload_0 = 0x2a,
    aload_1 = 0x2b,
    aload_2 = 0x2c,
    aload_3 = 0x2d,
    iaload = 0x2e,
    laload = 0x2f,
    faload = 0x30,
    daload = 0x31,
    aaload = 0x32,
    baload = 0x33,
    caload = 0x34,
    saload = 0x35,

    // Stores
    istore = 0x36,
    lstore = 0x37,
    fstore = 0x38,
    dstore = 0x39,
    astore = 0x3a,
    istore_0 = 0x3b,
    istore_1 = 0x3c,
    istore_2 = 0x3d,
    istore_3 = 0x3e,
    lstore_0 = 0x3f,
    lstore_1 = 0x40,
    lstore_2 = 0x41,
    lstore_3 = 0x42,
    fstore_0 = 0x43,
    fstore_1 = 0x44,
    fstore_2 = 0x45,
    fstore_3 = 0x46,
    dstore_0 = 0x47,
    dstore_1 = 0x48,
    dstore_2 = 0x49,
    dstore_3 = 0x4a,
    astore_0 = 0x4b,
    astore_1 = 0x4c,
    astore_2 = 0x4d,
    astore_3 = 0x4e,
    iastore = 0x4f,
    lastore = 0x50,
    fastore = 0x51,
    dastore = 0x52,
    aastore = 0x53,
    bastore = 0x54,
    castore = 0x55,
    sastore = 0x56,

    // Stack
    pop = 0x57,
    pop2 = 0x58,
    dup = 0x59,
    dup_x1 = 0x5a,
    dup_x2 = 0x5b,
    dup2 = 0x5c,
    dup2_x1 = 0x5d,
    dup2_x2 = 0x5e,
    swap = 0x5f,

    // Math
    iadd = 0x60,
    ladd = 0x61,
    fadd = 0x62,
    dadd = 0x63,
    isub = 0x64,
    lsub = 0x65,
    fsub = 0x66,
    dsub = 0x67,
    imul = 0x68,
    lmul = 0x69,
    fmul = 0x6a,
    dmul = 0x6b,
    idiv = 0x6c,
    ldiv = 0x6d,
    fdiv = 0x6e,
    ddiv = 0x6f,
    irem = 0x70,
    lrem = 0x71,
    frem = 0x72,
    drem = 0x73,
    ineg = 0x74,
    lneg = 0x75,
    fneg = 0x76,
    dneg = 0x77,
    ishl = 0x78,
    lshl = 0x79,
    ishr = 0x7a,
    lshr = 0x7b,
    iushr = 0x7c,
    lushr = 0x7d,
    iand = 0x7e,
    land = 0x7f,
    ior = 0x80,
    lor = 0x81,
    ixor = 0x82,
    lxor = 0x83,
    iinc = 0x84,

    // Conversions
    i2l = 0x85,
    i2f = 0x86,
    i2d = 0x87,
    l2i = 0x88,
    l2f = 0x89,
    l2d = 0x8a,
    f2i = 0x8b,
    f2l = 0x8c,
    f2d = 0x8d,
    d2i = 0x8e,
    d2l = 0x8f,
    d2f = 0x90,
    i2b = 0x91,
    i2c = 0x92,
    i2s = 0x93,

    // Comparisons
    lcmp = 0x94,
    fcmpl = 0x95,
    fcmpg = 0x96,
    dcmpl = 0x97,
    dcmpg = 0x98,
    ifeq = 0x99,
    ifne = 0x9a,
    iflt = 0x9b,
    ifge = 0x9c,
    ifgt = 0x9d,
    ifle = 0x9e,
    if_icmpeq = 0x9f,
    if_icmpne = 0xa0,
    if_icmplt = 0xa1,
    if_icmpge = 0xa2,
    if_icmpgt = 0xa3,
    if_icmple = 0xa4,
    if_acmpeq = 0xa5,
    if_acmpne = 0xa6,

    // Control
    goto = 0xa7,
    jsr = 0xa8,
    ret = 0xa9,
    tableswitch = 0xaa,
    lookupswitch = 0xab,
    ireturn = 0xac,
    lreturn = 0xad,
    freturn = 0xae,
    dreturn = 0xaf,
    areturn = 0xb0,
    // return void
    vreturn = 0xb1,

    // References
    getstatic = 0xb2,
    putstatic = 0xb3,
    getfield = 0xb4,
    putfield = 0xb5,
    invokevirtual = 0xb6,
    invokespecial = 0xb7,
    invokestatic = 0xb8,
    invokeinterface = 0xb9,
    invokedynamic = 0xba,
    new = 0xbb,
    newarray = 0xbc,
    anewarray = 0xbd,
    arraylength = 0xbe,
    athrow = 0xbf,
    checkcast = 0xc0,
    instanceof = 0xc1,
    monitorenter = 0xc2,
    monitorexit = 0xc3,

    // Extended
    wide = 0xc4,
    multianewarray = 0xc5,
    ifnull = 0xc6,
    ifnonnull = 0xc7,
    goto_w = 0xc8,
    jsr_w = 0xc9,

    // Reserved
    breakpoint = 0xca,
    impdep1 = 0xfe,
    impdep2 = 0xff,
}

impl From<u8> for OpCode {
    fn from(value: u8) -> Self {
        match value {
            0x00 => OpCode::nop,
            0x01 => OpCode::aconst_null,
            0x02 => OpCode::iconst_m1,
            0x03 => OpCode::iconst_0,
            0x04 => OpCode::iconst_1,
            0x05 => OpCode::iconst_2,
            0x06 => OpCode::iconst_3,
            0x07 => OpCode::iconst_4,
            0x08 => OpCode::iconst_5,
            0x09 => OpCode::lconst_0,
            0x0a => OpCode::lconst_1,
            0x0b => OpCode::fconst_0,
            0x0c => OpCode::fconst_1,
            0x0d => OpCode::fconst_2,
            0x0e => OpCode::dconst_0,
            0x0f => OpCode::dconst_1,
            0x10 => OpCode::bipush,
            0x11 => OpCode::sipush,
            0x12 => OpCode::ldc,
            0x13 => OpCode::ldc_w,
            0x14 => OpCode::ldc2_w,
            0x15 => OpCode::iload,
            0x16 => OpCode::lload,
            0x17 => OpCode::fload,
            0x18 => OpCode::dload,
            0x19 => OpCode::aload,
            0x1a => OpCode::iload_0,
            0x1b => OpCode::iload_1,
            0x1c => OpCode::iload_2,
            0x1d => OpCode::iload_3,
            0x1e => OpCode::lload_0,
            0x1f => OpCode::lload_1,
            0x20 => OpCode::lload_2,
            0x21 => OpCode::lload_3,
            0x22 => OpCode::fload_0,
            0x23 => OpCode::fload_1,
            0x24 => OpCode::fload_2,
            0x25 => OpCode::fload_3,
            0x26 => OpCode::dload_0,
            0x27 => OpCode::dload_1,
            0x28 => OpCode::dload_2,
            0x29 => OpCode::dload_3,
            0x2a => OpCode::aload_0,
            0x2b => OpCode::aload_1,
            0x2c => OpCode::aload_2,
            0x2d => OpCode::aload_3,
            0x2e => OpCode::iaload,
            0x2f => OpCode::laload,
            0x30 => OpCode::faload,
            0x31 => OpCode::daload,
            0x32 => OpCode::aaload,
            0x33 => OpCode::baload,
            0x34 => OpCode::caload,
            0x35 => OpCode::saload,
            0x36 => OpCode::istore,
            0x37 => OpCode::lstore,
            0x38 => OpCode::fstore,
            0x39 => OpCode::dstore,
            0x3a => OpCode::astore,
            0x3b => OpCode::istore_0,
            0x3c => OpCode::istore_1,
            0x3d => OpCode::istore_2,
            0x3e => OpCode::istore_3,
            0x3f => OpCode::lstore_0,
            0x40 => OpCode::lstore_1,
            0x41 => OpCode::lstore_2,
            0x42 => OpCode::lstore_3,
            0x43 => OpCode::fstore_0,
            0x44 => OpCode::fstore_1,
            0x45 => OpCode::fstore_2,
            0x46 => OpCode::fstore_3,
            0x47 => OpCode::dstore_0,
            0x48 => OpCode::dstore_1,
            0x49 => OpCode::dstore_2,
            0x4a => OpCode::dstore_3,
            0x4b => OpCode::astore_0,
            0x4c => OpCode::astore_1,
            0x4d => OpCode::astore_2,
            0x4e => OpCode::astore_3,
            0x4f => OpCode::iastore,
            0x50 => OpCode::lastore,
            0x51 => OpCode::fastore,
            0x52 => OpCode::dastore,
            0x53 => OpCode::aastore,
            0x54 => OpCode::bastore,
            0x55 => OpCode::castore,
            0x56 => OpCode::sastore,
            0x57 => OpCode::pop,
            0x58 => OpCode::pop2,
            0x59 => OpCode::dup,
            0x5a => OpCode::dup_x1,
            0x5b => OpCode::dup_x2,
            0x5c => OpCode::dup2,
            0x5d => OpCode::dup2_x1,
            0x5e => OpCode::dup2_x2,
            0x5f => OpCode::swap,
            0x60 => OpCode::iadd,
            0x61 => OpCode::ladd,
            0x62 => OpCode::fadd,
            0x63 => OpCode::dadd,
            0x64 => OpCode::isub,
            0x65 => OpCode::lsub,
            0x66 => OpCode::fsub,
            0x67 => OpCode::dsub,
            0x68 => OpCode::imul,
            0x69 => OpCode::lmul,
            0x6a => OpCode::fmul,
            0x6b => OpCode::dmul,
            0x6c => OpCode::idiv,
            0x6d => OpCode::ldiv,
            0x6e => OpCode::fdiv,
            0x6f => OpCode::ddiv,
            0x70 => OpCode::irem,
            0x71 => OpCode::lrem,
            0x72 => OpCode::frem,
            0x73 => OpCode::drem,
            0x74 => OpCode::ineg,
            0x75 => OpCode::lneg,
            0x76 => OpCode::fneg,
            0x77 => OpCode::dneg,
            0x78 => OpCode::ishl,
            0x79 => OpCode::lshl,
            0x7a => OpCode::ishr,
            0x7b => OpCode::lshr,
            0x7c => OpCode::iushr,
            0x7d => OpCode::lushr,
            0x7e => OpCode::iand,
            0x7f => OpCode::land,
            0x80 => OpCode::ior,
            0x81 => OpCode::lor,
            0x82 => OpCode::ixor,
            0x83 => OpCode::lxor,
            0x84 => OpCode::iinc,
            0x85 => OpCode::i2l,
            0x86 => OpCode::i2f,
            0x87 => OpCode::i2d,
            0x88 => OpCode::l2i,
            0x89 => OpCode::l2f,
            0x8a => OpCode::l2d,
            0x8b => OpCode::f2i,
            0x8c => OpCode::f2l,
            0x8d => OpCode::f2d,
            0x8e => OpCode::d2i,
            0x8f => OpCode::d2l,
            0x90 => OpCode::d2f,
            0x91 => OpCode::i2b,
            0x92 => OpCode::i2c,
            0x93 => OpCode::i2s,
            0x94 => OpCode::lcmp,
            0x95 => OpCode::fcmpl,
            0x96 => OpCode::fcmpg,
            0x97 => OpCode::dcmpl,
            0x98 => OpCode::dcmpg,
            0x99 => OpCode::ifeq,
            0x9a => OpCode::ifne,
            0x9b => OpCode::iflt,
            0x9c => OpCode::ifge,
            0x9d => OpCode::ifgt,
            0x9e => OpCode::ifle,
            0x9f => OpCode::if_icmpeq,
            0xa0 => OpCode::if_icmpne,
            0xa1 => OpCode::if_icmplt,
            0xa2 => OpCode::if_icmpge,
            0xa3 => OpCode::if_icmpgt,
            0xa4 => OpCode::if_icmple,
            0xa5 => OpCode::if_acmpeq,
            0xa6 => OpCode::if_acmpne,
            0xa7 => OpCode::goto,
            0xa8 => OpCode::jsr,
            0xa9 => OpCode::ret,
            0xaa => OpCode::tableswitch,
            0xab => OpCode::lookupswitch,
            0xac => OpCode::ireturn,
            0xad => OpCode::lreturn,
            0xae => OpCode::freturn,
            0xaf => OpCode::dreturn,
            0xb0 => OpCode::areturn,
            0xb1 => OpCode::vreturn,
            0xb2 => OpCode::getstatic,
            0xb3 => OpCode::putstatic,
            0xb4 => OpCode::getfield,
            0xb5 => OpCode::putfield,
            0xb6 => OpCode::invokevirtual,
            0xb7 => OpCode::invokespecial,
            0xb8 => OpCode::invokestatic,
            0xb9 => OpCode::invokeinterface,
            0xba => OpCode::invokedynamic,
            0xbb => OpCode::new,
            0xbc => OpCode::newarray,
            0xbd => OpCode::anewarray,
            0xbe => OpCode::arraylength,
            0xbf => OpCode::athrow,
            0xc0 => OpCode::checkcast,
            0xc1 => OpCode::instanceof,
            0xc2 => OpCode::monitorenter,
            0xc3 => OpCode::monitorexit,
            0xc4 => OpCode::wide,
            0xc5 => OpCode::multianewarray,
            0xc6 => OpCode::ifnull,
            0xc7 => OpCode::ifnonnull,
            0xc8 => OpCode::goto_w,
            0xc9 => OpCode::jsr_w,
            0xca => OpCode::breakpoint,
            0xfe => OpCode::impdep1,
            0xff => OpCode::impdep2,
            _ => unreachable!(),
        }
    }
}
